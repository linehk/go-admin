// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package model

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const checkMenuByID = `-- name: CheckMenuByID :one
SELECT EXISTS (SELECT 1 FROM menu WHERE id = $1)
`

func (q *Queries) CheckMenuByID(ctx context.Context, id int32) (bool, error) {
	row := q.db.QueryRow(ctx, checkMenuByID, id)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const checkResourceByID = `-- name: CheckResourceByID :one
SELECT EXISTS (SELECT 1 FROM resource WHERE id = $1)
`

func (q *Queries) CheckResourceByID(ctx context.Context, id int32) (bool, error) {
	row := q.db.QueryRow(ctx, checkResourceByID, id)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const checkRoleByCode = `-- name: CheckRoleByCode :one
SELECT EXISTS (SELECT 1 FROM role WHERE code = $1)
`

func (q *Queries) CheckRoleByCode(ctx context.Context, code string) (bool, error) {
	row := q.db.QueryRow(ctx, checkRoleByCode, code)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const checkRoleByID = `-- name: CheckRoleByID :one
SELECT EXISTS (SELECT 1 FROM role WHERE id = $1)
`

func (q *Queries) CheckRoleByID(ctx context.Context, id int32) (bool, error) {
	row := q.db.QueryRow(ctx, checkRoleByID, id)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const checkRoleMenuByID = `-- name: CheckRoleMenuByID :one
SELECT EXISTS (SELECT 1 FROM role_menu WHERE id = $1)
`

func (q *Queries) CheckRoleMenuByID(ctx context.Context, id int32) (bool, error) {
	row := q.db.QueryRow(ctx, checkRoleMenuByID, id)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const checkUserByID = `-- name: CheckUserByID :one
SELECT EXISTS (SELECT 1 FROM app_user WHERE id = $1)
`

func (q *Queries) CheckUserByID(ctx context.Context, id int32) (bool, error) {
	row := q.db.QueryRow(ctx, checkUserByID, id)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const checkUserByUsername = `-- name: CheckUserByUsername :one
SELECT EXISTS (SELECT 1 FROM app_user WHERE username = $1)
`

func (q *Queries) CheckUserByUsername(ctx context.Context, username string) (bool, error) {
	row := q.db.QueryRow(ctx, checkUserByUsername, username)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const checkUserRoleByID = `-- name: CheckUserRoleByID :one
SELECT EXISTS (SELECT 1 FROM user_role WHERE id = $1)
`

func (q *Queries) CheckUserRoleByID(ctx context.Context, id int32) (bool, error) {
	row := q.db.QueryRow(ctx, checkUserRoleByID, id)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const createMenu = `-- name: CreateMenu :one
INSERT INTO menu (code, name, description, sequence, type, path, property,
parent_id, parent_path, status, created, updated)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12)
RETURNING id, code, name, description, sequence, type, path, property, parent_id, parent_path, status, created, updated
`

type CreateMenuParams struct {
	Code        string
	Name        string
	Description string
	Sequence    int16
	Type        string
	Path        string
	Property    string
	ParentID    int32
	ParentPath  string
	Status      string
	Created     pgtype.Timestamp
	Updated     pgtype.Timestamp
}

func (q *Queries) CreateMenu(ctx context.Context, arg CreateMenuParams) (Menu, error) {
	row := q.db.QueryRow(ctx, createMenu,
		arg.Code,
		arg.Name,
		arg.Description,
		arg.Sequence,
		arg.Type,
		arg.Path,
		arg.Property,
		arg.ParentID,
		arg.ParentPath,
		arg.Status,
		arg.Created,
		arg.Updated,
	)
	var i Menu
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.Name,
		&i.Description,
		&i.Sequence,
		&i.Type,
		&i.Path,
		&i.Property,
		&i.ParentID,
		&i.ParentPath,
		&i.Status,
		&i.Created,
		&i.Updated,
	)
	return i, err
}

const createResource = `-- name: CreateResource :one
INSERT INTO resource (menu_id, method, path, created, updated)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, menu_id, method, path, created, updated
`

type CreateResourceParams struct {
	MenuID  int32
	Method  string
	Path    string
	Created pgtype.Timestamp
	Updated pgtype.Timestamp
}

func (q *Queries) CreateResource(ctx context.Context, arg CreateResourceParams) (Resource, error) {
	row := q.db.QueryRow(ctx, createResource,
		arg.MenuID,
		arg.Method,
		arg.Path,
		arg.Created,
		arg.Updated,
	)
	var i Resource
	err := row.Scan(
		&i.ID,
		&i.MenuID,
		&i.Method,
		&i.Path,
		&i.Created,
		&i.Updated,
	)
	return i, err
}

const createRole = `-- name: CreateRole :one
INSERT INTO role (code, name, description, sequence, status, created, updated)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id, code, name, description, sequence, status, created, updated
`

type CreateRoleParams struct {
	Code        string
	Name        string
	Description string
	Sequence    int16
	Status      string
	Created     pgtype.Timestamp
	Updated     pgtype.Timestamp
}

func (q *Queries) CreateRole(ctx context.Context, arg CreateRoleParams) (Role, error) {
	row := q.db.QueryRow(ctx, createRole,
		arg.Code,
		arg.Name,
		arg.Description,
		arg.Sequence,
		arg.Status,
		arg.Created,
		arg.Updated,
	)
	var i Role
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.Name,
		&i.Description,
		&i.Sequence,
		&i.Status,
		&i.Created,
		&i.Updated,
	)
	return i, err
}

const createRoleMenu = `-- name: CreateRoleMenu :one
INSERT INTO role_menu (role_id, menu_id, created, updated)
VALUES ($1, $2, $3, $4)
RETURNING id, role_id, menu_id, created, updated
`

type CreateRoleMenuParams struct {
	RoleID  int32
	MenuID  int32
	Created pgtype.Timestamp
	Updated pgtype.Timestamp
}

func (q *Queries) CreateRoleMenu(ctx context.Context, arg CreateRoleMenuParams) (RoleMenu, error) {
	row := q.db.QueryRow(ctx, createRoleMenu,
		arg.RoleID,
		arg.MenuID,
		arg.Created,
		arg.Updated,
	)
	var i RoleMenu
	err := row.Scan(
		&i.ID,
		&i.RoleID,
		&i.MenuID,
		&i.Created,
		&i.Updated,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO app_user (username, password, name, email, phone, remark, status,
created, updated)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
RETURNING id, username, password, name, email, phone, remark, status, created, updated
`

type CreateUserParams struct {
	Username string
	Password string
	Name     string
	Email    string
	Phone    string
	Remark   string
	Status   string
	Created  pgtype.Timestamp
	Updated  pgtype.Timestamp
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (AppUser, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Username,
		arg.Password,
		arg.Name,
		arg.Email,
		arg.Phone,
		arg.Remark,
		arg.Status,
		arg.Created,
		arg.Updated,
	)
	var i AppUser
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Name,
		&i.Email,
		&i.Phone,
		&i.Remark,
		&i.Status,
		&i.Created,
		&i.Updated,
	)
	return i, err
}

const createUserRole = `-- name: CreateUserRole :one
INSERT INTO user_role (user_id, role_id, created, updated)
VALUES ($1, $2, $3, $4)
RETURNING id, user_id, role_id, created, updated
`

type CreateUserRoleParams struct {
	UserID  int32
	RoleID  int32
	Created pgtype.Timestamp
	Updated pgtype.Timestamp
}

func (q *Queries) CreateUserRole(ctx context.Context, arg CreateUserRoleParams) (UserRole, error) {
	row := q.db.QueryRow(ctx, createUserRole,
		arg.UserID,
		arg.RoleID,
		arg.Created,
		arg.Updated,
	)
	var i UserRole
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.RoleID,
		&i.Created,
		&i.Updated,
	)
	return i, err
}

const deleteMenu = `-- name: DeleteMenu :exec
DELETE FROM menu
WHERE id = $1
`

func (q *Queries) DeleteMenu(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteMenu, id)
	return err
}

const deleteResource = `-- name: DeleteResource :exec
DELETE FROM resource
WHERE id = $1
`

func (q *Queries) DeleteResource(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteResource, id)
	return err
}

const deleteResourceByMenuID = `-- name: DeleteResourceByMenuID :exec
DELETE FROM resource
WHERE menu_id = $1
`

func (q *Queries) DeleteResourceByMenuID(ctx context.Context, menuID int32) error {
	_, err := q.db.Exec(ctx, deleteResourceByMenuID, menuID)
	return err
}

const deleteRole = `-- name: DeleteRole :exec
DELETE FROM role
WHERE id = $1
`

func (q *Queries) DeleteRole(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteRole, id)
	return err
}

const deleteRoleMenu = `-- name: DeleteRoleMenu :exec
DELETE FROM role_menu
WHERE id = $1
`

func (q *Queries) DeleteRoleMenu(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteRoleMenu, id)
	return err
}

const deleteRoleMenuByRoleID = `-- name: DeleteRoleMenuByRoleID :exec
DELETE FROM role_menu
WHERE role_id = $1
`

func (q *Queries) DeleteRoleMenuByRoleID(ctx context.Context, roleID int32) error {
	_, err := q.db.Exec(ctx, deleteRoleMenuByRoleID, roleID)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM app_user
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const deleteUserRole = `-- name: DeleteUserRole :exec
DELETE FROM user_role
WHERE id = $1
`

func (q *Queries) DeleteUserRole(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteUserRole, id)
	return err
}

const deleteUserRoleByUserID = `-- name: DeleteUserRoleByUserID :exec
DELETE FROM user_role
WHERE user_id = $1
`

func (q *Queries) DeleteUserRoleByUserID(ctx context.Context, userID int32) error {
	_, err := q.db.Exec(ctx, deleteUserRoleByUserID, userID)
	return err
}

const getMenu = `-- name: GetMenu :one
SELECT id, code, name, description, sequence, type, path, property, parent_id, parent_path, status, created, updated
FROM menu
WHERE id = $1 LIMIT 1
`

// ------------------------------- Menu --------------------------------
func (q *Queries) GetMenu(ctx context.Context, id int32) (Menu, error) {
	row := q.db.QueryRow(ctx, getMenu, id)
	var i Menu
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.Name,
		&i.Description,
		&i.Sequence,
		&i.Type,
		&i.Path,
		&i.Property,
		&i.ParentID,
		&i.ParentPath,
		&i.Status,
		&i.Created,
		&i.Updated,
	)
	return i, err
}

const getResource = `-- name: GetResource :one
SELECT id, menu_id, method, path, created, updated
FROM resource
WHERE id = $1 LIMIT 1
`

// ------------------------------- Resource --------------------------------
func (q *Queries) GetResource(ctx context.Context, id int32) (Resource, error) {
	row := q.db.QueryRow(ctx, getResource, id)
	var i Resource
	err := row.Scan(
		&i.ID,
		&i.MenuID,
		&i.Method,
		&i.Path,
		&i.Created,
		&i.Updated,
	)
	return i, err
}

const getRole = `-- name: GetRole :one
SELECT id, code, name, description, sequence, status, created, updated
FROM role
WHERE id = $1 LIMIT 1
`

// ------------------------------- Role --------------------------------
func (q *Queries) GetRole(ctx context.Context, id int32) (Role, error) {
	row := q.db.QueryRow(ctx, getRole, id)
	var i Role
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.Name,
		&i.Description,
		&i.Sequence,
		&i.Status,
		&i.Created,
		&i.Updated,
	)
	return i, err
}

const getRoleMenu = `-- name: GetRoleMenu :one
SELECT id, role_id, menu_id, created, updated
FROM role_menu
WHERE id = $1 LIMIT 1
`

// ------------------------------- RoleMenu --------------------------------
func (q *Queries) GetRoleMenu(ctx context.Context, id int32) (RoleMenu, error) {
	row := q.db.QueryRow(ctx, getRoleMenu, id)
	var i RoleMenu
	err := row.Scan(
		&i.ID,
		&i.RoleID,
		&i.MenuID,
		&i.Created,
		&i.Updated,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, username, password, name, email, phone, remark, status, created, updated
FROM app_user
WHERE id = $1 LIMIT 1
`

// ------------------------------- User --------------------------------
func (q *Queries) GetUser(ctx context.Context, id int32) (AppUser, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i AppUser
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Name,
		&i.Email,
		&i.Phone,
		&i.Remark,
		&i.Status,
		&i.Created,
		&i.Updated,
	)
	return i, err
}

const getUserRole = `-- name: GetUserRole :one
SELECT id, user_id, role_id, created, updated
FROM user_role
WHERE id = $1 LIMIT 1
`

// ------------------------------- UserRole --------------------------------
func (q *Queries) GetUserRole(ctx context.Context, id int32) (UserRole, error) {
	row := q.db.QueryRow(ctx, getUserRole, id)
	var i UserRole
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.RoleID,
		&i.Created,
		&i.Updated,
	)
	return i, err
}

const listResourceByMenuIDList = `-- name: ListResourceByMenuIDList :many
SELECT id, menu_id, method, path, created, updated
FROM resource
WHERE menu_id = ANY($1::int[])
`

func (q *Queries) ListResourceByMenuIDList(ctx context.Context, dollar_1 []int32) ([]Resource, error) {
	rows, err := q.db.Query(ctx, listResourceByMenuIDList, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Resource
	for rows.Next() {
		var i Resource
		if err := rows.Scan(
			&i.ID,
			&i.MenuID,
			&i.Method,
			&i.Path,
			&i.Created,
			&i.Updated,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listRole = `-- name: ListRole :many
SELECT id, code, name, description, sequence, status, created, updated
FROM role
WHERE ($1::VARCHAR = '' OR $1::VARCHAR ILIKE '%' || $1 || '%')
AND ($2::VARCHAR = '' OR $2::VARCHAR = $2)
AND id > $3
ORDER BY sequence, created DESC
LIMIT $4
`

type ListRoleParams struct {
	Column1 string
	Column2 string
	ID      int32
	Limit   int32
}

func (q *Queries) ListRole(ctx context.Context, arg ListRoleParams) ([]Role, error) {
	rows, err := q.db.Query(ctx, listRole,
		arg.Column1,
		arg.Column2,
		arg.ID,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Role
	for rows.Next() {
		var i Role
		if err := rows.Scan(
			&i.ID,
			&i.Code,
			&i.Name,
			&i.Description,
			&i.Sequence,
			&i.Status,
			&i.Created,
			&i.Updated,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listRoleMenuByRoleIDList = `-- name: ListRoleMenuByRoleIDList :many
SELECT id, role_id, menu_id, created, updated
FROM role_menu
WHERE role_id = ANY($1::int[])
`

func (q *Queries) ListRoleMenuByRoleIDList(ctx context.Context, dollar_1 []int32) ([]RoleMenu, error) {
	rows, err := q.db.Query(ctx, listRoleMenuByRoleIDList, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RoleMenu
	for rows.Next() {
		var i RoleMenu
		if err := rows.Scan(
			&i.ID,
			&i.RoleID,
			&i.MenuID,
			&i.Created,
			&i.Updated,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUser = `-- name: ListUser :many
SELECT id, username, password, name, email, phone, remark, status, created, updated
FROM app_user
WHERE ($1::VARCHAR = '' OR $1::VARCHAR ILIKE '%' || $1 || '%')
AND ($2::VARCHAR = '' OR $2::VARCHAR ILIKE '%' || $2 || '%')
AND ($3::VARCHAR = '' OR $3::VARCHAR = $3)
AND id > $4
ORDER BY created DESC
LIMIT $5
`

type ListUserParams struct {
	Column1 string
	Column2 string
	Column3 string
	ID      int32
	Limit   int32
}

func (q *Queries) ListUser(ctx context.Context, arg ListUserParams) ([]AppUser, error) {
	rows, err := q.db.Query(ctx, listUser,
		arg.Column1,
		arg.Column2,
		arg.Column3,
		arg.ID,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AppUser
	for rows.Next() {
		var i AppUser
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Password,
			&i.Name,
			&i.Email,
			&i.Phone,
			&i.Remark,
			&i.Status,
			&i.Created,
			&i.Updated,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUserRoleByUserIDList = `-- name: ListUserRoleByUserIDList :many
SELECT id, user_id, role_id, created, updated
FROM user_role
WHERE user_id = ANY($1::int[])
`

func (q *Queries) ListUserRoleByUserIDList(ctx context.Context, dollar_1 []int32) ([]UserRole, error) {
	rows, err := q.db.Query(ctx, listUserRoleByUserIDList, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UserRole
	for rows.Next() {
		var i UserRole
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.RoleID,
			&i.Created,
			&i.Updated,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMenu = `-- name: UpdateMenu :one
UPDATE menu
SET code = $2, name = $3, description = $4, sequence = $5, type = $6,
path = $7, property = $8, parent_id = $9, parent_path = $10, status = $11,
created = $12, updated = $13
WHERE id = $1
RETURNING id, code, name, description, sequence, type, path, property, parent_id, parent_path, status, created, updated
`

type UpdateMenuParams struct {
	ID          int32
	Code        string
	Name        string
	Description string
	Sequence    int16
	Type        string
	Path        string
	Property    string
	ParentID    int32
	ParentPath  string
	Status      string
	Created     pgtype.Timestamp
	Updated     pgtype.Timestamp
}

func (q *Queries) UpdateMenu(ctx context.Context, arg UpdateMenuParams) (Menu, error) {
	row := q.db.QueryRow(ctx, updateMenu,
		arg.ID,
		arg.Code,
		arg.Name,
		arg.Description,
		arg.Sequence,
		arg.Type,
		arg.Path,
		arg.Property,
		arg.ParentID,
		arg.ParentPath,
		arg.Status,
		arg.Created,
		arg.Updated,
	)
	var i Menu
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.Name,
		&i.Description,
		&i.Sequence,
		&i.Type,
		&i.Path,
		&i.Property,
		&i.ParentID,
		&i.ParentPath,
		&i.Status,
		&i.Created,
		&i.Updated,
	)
	return i, err
}

const updateResource = `-- name: UpdateResource :one
UPDATE resource
SET menu_id = $2, method = $3, path = $4, created = $5, updated = $6
WHERE id = $1
RETURNING id, menu_id, method, path, created, updated
`

type UpdateResourceParams struct {
	ID      int32
	MenuID  int32
	Method  string
	Path    string
	Created pgtype.Timestamp
	Updated pgtype.Timestamp
}

func (q *Queries) UpdateResource(ctx context.Context, arg UpdateResourceParams) (Resource, error) {
	row := q.db.QueryRow(ctx, updateResource,
		arg.ID,
		arg.MenuID,
		arg.Method,
		arg.Path,
		arg.Created,
		arg.Updated,
	)
	var i Resource
	err := row.Scan(
		&i.ID,
		&i.MenuID,
		&i.Method,
		&i.Path,
		&i.Created,
		&i.Updated,
	)
	return i, err
}

const updateRole = `-- name: UpdateRole :one
UPDATE role
SET code = $2, name = $3, description = $4, sequence = $5, status = $6,
created = $7, updated = $8
WHERE id = $1
RETURNING id, code, name, description, sequence, status, created, updated
`

type UpdateRoleParams struct {
	ID          int32
	Code        string
	Name        string
	Description string
	Sequence    int16
	Status      string
	Created     pgtype.Timestamp
	Updated     pgtype.Timestamp
}

func (q *Queries) UpdateRole(ctx context.Context, arg UpdateRoleParams) (Role, error) {
	row := q.db.QueryRow(ctx, updateRole,
		arg.ID,
		arg.Code,
		arg.Name,
		arg.Description,
		arg.Sequence,
		arg.Status,
		arg.Created,
		arg.Updated,
	)
	var i Role
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.Name,
		&i.Description,
		&i.Sequence,
		&i.Status,
		&i.Created,
		&i.Updated,
	)
	return i, err
}

const updateRoleMenu = `-- name: UpdateRoleMenu :one
UPDATE role_menu
SET role_id = $2, menu_id = $3, created = $4, updated = $5
WHERE id = $1
RETURNING id, role_id, menu_id, created, updated
`

type UpdateRoleMenuParams struct {
	ID      int32
	RoleID  int32
	MenuID  int32
	Created pgtype.Timestamp
	Updated pgtype.Timestamp
}

func (q *Queries) UpdateRoleMenu(ctx context.Context, arg UpdateRoleMenuParams) (RoleMenu, error) {
	row := q.db.QueryRow(ctx, updateRoleMenu,
		arg.ID,
		arg.RoleID,
		arg.MenuID,
		arg.Created,
		arg.Updated,
	)
	var i RoleMenu
	err := row.Scan(
		&i.ID,
		&i.RoleID,
		&i.MenuID,
		&i.Created,
		&i.Updated,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE app_user
SET username = $2, password = $3, name = $4, email = $5, phone = $6,
remark = $7, status = $8, created = $9, updated = $10
WHERE id = $1
RETURNING id, username, password, name, email, phone, remark, status, created, updated
`

type UpdateUserParams struct {
	ID       int32
	Username string
	Password string
	Name     string
	Email    string
	Phone    string
	Remark   string
	Status   string
	Created  pgtype.Timestamp
	Updated  pgtype.Timestamp
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (AppUser, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.ID,
		arg.Username,
		arg.Password,
		arg.Name,
		arg.Email,
		arg.Phone,
		arg.Remark,
		arg.Status,
		arg.Created,
		arg.Updated,
	)
	var i AppUser
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Name,
		&i.Email,
		&i.Phone,
		&i.Remark,
		&i.Status,
		&i.Created,
		&i.Updated,
	)
	return i, err
}

const updateUserRole = `-- name: UpdateUserRole :one
UPDATE user_role
SET user_id = $2, role_id = $3, created = $4, updated = $5
WHERE id = $1
RETURNING id, user_id, role_id, created, updated
`

type UpdateUserRoleParams struct {
	ID      int32
	UserID  int32
	RoleID  int32
	Created pgtype.Timestamp
	Updated pgtype.Timestamp
}

func (q *Queries) UpdateUserRole(ctx context.Context, arg UpdateUserRoleParams) (UserRole, error) {
	row := q.db.QueryRow(ctx, updateUserRole,
		arg.ID,
		arg.UserID,
		arg.RoleID,
		arg.Created,
		arg.Updated,
	)
	var i UserRole
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.RoleID,
		&i.Created,
		&i.Updated,
	)
	return i, err
}
