// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: Query.sql

package model

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO app_user (
  username, password
) VALUES (
  $1, $2
)
RETURNING id, username, password
`

type CreateUserParams struct {
	Username string
	Password string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (AppUser, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Username, arg.Password)
	var i AppUser
	err := row.Scan(&i.ID, &i.Username, &i.Password)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM app_user
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, username, password FROM app_user
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id int64) (AppUser, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i AppUser
	err := row.Scan(&i.ID, &i.Username, &i.Password)
	return i, err
}

const listUser = `-- name: ListUser :many
SELECT id, username, password FROM app_user
ORDER BY username
`

func (q *Queries) ListUser(ctx context.Context) ([]AppUser, error) {
	rows, err := q.db.Query(ctx, listUser)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AppUser
	for rows.Next() {
		var i AppUser
		if err := rows.Scan(&i.ID, &i.Username, &i.Password); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :exec
UPDATE app_user
  set username = $2,
  password = $3
WHERE id = $1
RETURNING id, username, password
`

type UpdateUserParams struct {
	ID       int64
	Username string
	Password string
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.Exec(ctx, updateUser, arg.ID, arg.Username, arg.Password)
	return err
}
